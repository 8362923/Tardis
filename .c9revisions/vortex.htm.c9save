{"ts":1361115114473,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"<!doctype html>\n<html>\n\t<head>\n\t\t<title>learningthree.js boiler plate for three.js</title>\n\t\t<meta charset=\"utf-8\">\n\t\t<meta name=\"viewport\" content=\"width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0\">\n\t\t\n\t\t\t\n\t\t<script src=\"vendor/three.js/Three.js\"></script>\n\t\t<script src=\"vendor/three.js/Detector.js\"></script>\n\t\t<!-- https://github.com/mrdoob/stats.js -->\n\t\t<script src=\"vendor/three.js/Stats.js\"></script>\n\n\t\t<script src=\"vendor/threex/THREEx.screenshot.js\"></script>\n\t\t<script src=\"vendor/threex/THREEx.FullScreen.js\"></script>\n\t\t<script src=\"vendor/threex/THREEx.WindowResize.js\"></script>\n\t\t<script src=\"vendor/DragPanControls.js\"></script>\n\n\t\t<link  href=\"css/main.css\" rel=\"stylesheet\"/>\n\t</head>\n<body>\n\t<!-- three.js container -->\n    \t<div id=\"container\"></div>\n\t<!-- info on screen display -->\n\t<div id=\"info\">\n\t\t<a href=\"http://learningthreejs.com/\" target=\"_blank\">LearningThree.js</a>: \n\t\tExperimentation with tunnel effect\n\t</div> \n\t<div id=\"inlineDoc\">\n\t\t<span id=\"fullscreenDoc\"><i>f</i> for fullscreen - </span><i>p</i> for screenshot\n\t</div>\n\n\t<script type=\"text/javascript\">\n\t\tvar stats, scene, renderer;\n\t\tvar camera, cameraControl;\n\n\t\tif( !init() )\tanimate();\n\n\t\t// init the scene\n\t\tfunction init(){\n\n\t\t\tif( Detector.webgl ){\n\t\t\t\trenderer = new THREE.WebGLRenderer({\n\t\t\t\t\tantialias\t\t: true,\t// to get smoother output\n\t\t\t\t\tpreserveDrawingBuffer\t: true\t// to allow screenshot\n\t\t\t\t});\n\t\t\t\trenderer.setClearColorHex( 0x000000, 1 );\n\t\t\t// uncomment if webgl is required\n\t\t\t}else{\n\t\t\t\tDetector.addGetWebGLMessage();\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\trenderer.setSize( window.innerWidth, window.innerHeight );\n\t\t\tdocument.getElementById('container').appendChild(renderer.domElement);\n\n\t\t\t// add Stats.js - https://github.com/mrdoob/stats.js\n\t\t\tstats = new Stats();\n\t\t\tstats.domElement.style.position\t= 'absolute';\n\t\t\tstats.domElement.style.bottom\t= '0px';\n\t\t\tdocument.body.appendChild( stats.domElement );\n\n\t\t\t// create a scene\n\t\t\tscene = new THREE.Scene();\n\n\t\t\t// put a camera in the scene\n\t\t\tcamera = new THREE.PerspectiveCamera(40, window.innerWidth / window.innerHeight, 0.1, 10000 );\n\t\t\tcamera.position.set(0, 0, 7);\n\t\t\tcamera.lookAt(scene.position)\n\t\t\tscene.add(camera);\n\n\t\t\t// transparently support window resize\n\t\t\tTHREEx.WindowResize.bind(renderer, camera);\n\t\t\t// allow 'p' to make screenshot\n\t\t\tTHREEx.Screenshot.bindKey(renderer);\n\t\t\t// allow 'f' to go fullscreen where this feature is supported\n\t\t\tif( THREEx.FullScreen.available() ){\n\t\t\t\tTHREEx.FullScreen.bindKey();\t\t\t\t\n\t\t\t}else{\n\t\t\t\tdocument.getElementById('fullscreenDoc').style.display\t= \"none\";\t\t\t\t\n\t\t\t}\n\n\t\t\tvar light\t= new THREE.DirectionalLight( 0xff8000, 1.5 );\n\t\t\tlight.position.set( 1, 1, 0 ).normalize();\n\t\t\tscene.add( light );\n\t\t\t\n\t\t\tvar light\t= new THREE.DirectionalLight( 0xff8000, 1.5 );\n\t\t\tlight.position.set( -1, 1, 0 ).normalize();\n\t\t\tscene.add( light );\n\t\t\t\n\t\t\tvar light\t= new THREE.PointLight( 0x44FFAA, 15, 25 );\n\t\t\tlight.position.set( 0, -3, 0 );\n\t\t\tscene.add( light );\n\t\t\t\n\t\t\tvar light\t= new THREE.PointLight( 0xff4400, 20, 30 );\n\t\t\tlight.position.set( 3, 3, 0 );\n\t\t\tscene.add( light );\n\t\t\t\n\t\t\tscene.fog\t= new THREE.FogExp2( 0x000000, 0.15 );\n\n\t\t\t// here you add your objects\n\t\t\t// - you will most likely replace this part by your own\n\t\t\tvar geometry\t= new THREE.CylinderGeometry( 1, 1, 30, 32, 1, true );\n\t\t\ttexture\t\t= THREE.ImageUtils.loadTexture( \"images/water.jpg\" );\n\t\t\ttexture.wrapT\t= THREE.RepeatWrapping;\n\n\t\t\tvar material\t= new THREE.MeshLambertMaterial({color : 0xFFFFFF, map : texture});\n\t\t\tvar mesh\t= new THREE.Mesh( geometry, material );\n\t\t\tmesh.rotation.x\t= Math.PI/2;\n\t\t\tscene.add( mesh );\n\n\t\t\tmesh.flipSided\t= true;\n\t\t}\n\n\t\t// animation loop\n\t\tfunction animate() {\n\n\t\t\t// loop on request animation loop\n\t\t\t// - it has to be at the begining of the function\n\t\t\t// - see details at http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating\n\t\t\trequestAnimationFrame( animate );\n\n\t\t\t// do the render\n\t\t\trender();\n\n\t\t\t// update stats\n\t\t\tstats.update();\n\t\t}\n\n\t\t// render the scene\n\t\tfunction render() {\n\n\t\t\t// move the texture to give the illusion of moving thru the tunnel\n\t\t\ttexture.offset.y\t+= 0.008;\n\t\t\ttexture.offset.y\t%= 1;\n\t\t\ttexture.needsUpdate\t= true;\n\n\t\t\t// move the camera back and forth\n\t\t\tvar seconds\t\t= Date.now() / 1000;\n\t\t\tvar radius\t\t= 0.70;\n\t\t\tvar angle\t\t= Math.sin(0.75 * seconds * Math.PI) / 4;\n\t\t\t//angle\t= (seconds*Math.PI)/4;\n\t\t\tcamera.position.x\t= Math.cos(angle - Math.PI/2) * radius;\n\t\t\tcamera.position.y\t= Math.sin(angle - Math.PI/2) * radius;\n\t\t\tcamera.rotation.z\t= angle;\n\n\t\t\t// actually render the scene\n\t\t\trenderer.render( scene, camera );\n\t\t}\n\t</script>\n</body>\n</html>\n"]],"start1":0,"start2":0,"length1":0,"length2":4659}]],"length":4659}
